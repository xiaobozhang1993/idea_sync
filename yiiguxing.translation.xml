<application>
  <component name="AppStorage">
    <histories>
      <item value="Whether the HTTP session is allowed to be created." />
      <item value="The name of the attribute under which the HTTP session id is exposed" />
      <item value="Configure interceptors for the handshake request." />
      <item value="Configure a WebSocketHandler at the specified URL paths." />
      <item value="Defines callback methods to configure the WebSocket request handling" />
      <item value="A handler for WebSocket messages and lifecycle events" />
      <item value="All other methods have empty implementations." />
      <item value="Binary messages are rejected with" />
      <item value="Returns the value of the given calendar field. In lenient mode, * all calendar fields are normalized. In non-lenient mode, all * calendar fields are validated and this method throws an * exception if any calendar fields have out-of-range values. The * normalization and validation are handled by the" />
      <item value="iterable" />
      <item value="Invalid" />
      <item value="Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the * day of the month. This is a synonym for &lt;code&gt;DATE&lt;/code&gt;. * The first day of the month has value 1." />
      <item value="Returns the lowest maximum value for the given calendar field * of this &lt;code&gt;Calendar&lt;/code&gt; instance. The lowest maximum * value is defined as the smallest value returned by {@link * #getActualMaximum(int)} for any possible time value. The least * maximum value depends on calendar system specific parameters of * the instance. For example, a &lt;code&gt;Calendar&lt;/code&gt; for the * Gregorian calendar system returns 28 for the * &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field, because the 28th is the last * day of the shortest month of this calendar, February in a * common year." />
      <item value="* Parses text from the beginning of the given string to produce a date. * The method may not use the entire text of the given string. * &lt;p&gt; * See the {@link #parse(String, ParsePosition)} method for more information * on date parsing. * * @param source A &lt;code&gt;String&lt;/code&gt; whose beginning should be parsed. * @return A &lt;code&gt;Date&lt;/code&gt; parsed from the string. * @exception ParseException if the beginning of the specified string * cannot be parsed." />
      <item value="Returns the simple name of the underlying class as given in the * source code. Returns an empty string if the underlying class is * anonymous." />
      <item value="qualifying" />
      <item value="enum" />
      <item value="Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not * use this file except in compliance with the License. You may obtain a copy of * the License at * &lt;p&gt; * http://www.apache.org/licenses/LICENSE-2.0 * &lt;p&gt; * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations under * the License." />
      <item value="Marks the annotated method or type as permitting cross origin requests. * * &lt;p&gt;By default all origins and headers are permitted, credentials are allowed, * and the maximum age is set to 1800 seconds (30 minutes). The list of HTTP * methods is set to the methods on the {@code @RequestMapping} if not * explicitly set on {@code @CrossOrigin}. * * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {@code @CrossOrigin} is processed if an appropriate * {@code HandlerMapping}-{@code HandlerAdapter} pair is configured such as the * {@code RequestMappingHandlerMapping}-{@code RequestMappingHandlerAdapter} * pair which are the default in the MVC Java config and the MVC namespace. * In particular {@code @CrossOrigin} is not supported with the * {@code DefaultAnnotationHandlerMapping}-{@code AnnotationMethodHandlerAdapter} * pair both of which are also deprecated." />
      <item value="Illegal Argument Exception" />
      <item value="persistence" />
      <item value="Invokes the underlying method represented by this {@code Method} * object, on the specified object with the specified parameters. * Individual parameters are automatically unwrapped to match * primitive formal parameters, and both primitive and reference * parameters are subject to method invocation conversions as * necessary." />
      <item value="When compiling without debug info, or when interpreting pointcuts at runtime, * the names of any arguments used in the advice declaration are not available. * Under these circumstances only, it is necessary to provide the arg names in * the annotation - these MUST duplicate the names used in the annotated method. * Format is a simple comma-separated list." />
      <item value="The pointcut expression where to bind the advice" />
      <item value="Illegal" />
      <item value="Performs the authentication attempt by interacting with the single configured realm, which is significantly" />
      <item value="Attempts to authenticate the given token by iterating over the internal collection of" />
      <item value="Realize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones." />
      <item value="ealize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones" />
      <item value="in order to accurately handle these problems and to notify the user in an * appropriate manner why the authentication attempt failed" />
      <item value="See the specific exceptions listed below to as examples of what could happen" />
      <item value="if there is any problem during the authentication process." />
      <item value="Pluggable" />
      <item value="An Authenticator is responsible for authenticating accounts in an application. It * is one of the primary entry points into the Shiro API." />
      <item value="primary" />
      <item value="Authenticates a user based on the submitted" />
      <item value="* Authenticates a user based on the submitted {@code AuthenticationToken}." />
      <item value="Delegates to the wrapped" />
      <item value="Returns the currently accessible {@code Subject} available to the calling code depending on * runtime environment. * &lt;p/&gt; * This method is provided as a way of obtaining a {@code Subject} without having to resort to * implementation-specific methods. It also allows the Shiro team to change the underlying implementation of * this method in the future depending on requirements/updates without affecting your code that uses it." />
      <item value="Accesses the currently accessible {@code Subject} for the calling code depending on runtime environment." />
      <item value="Performs a login attempt for this Subject/user. If unsuccessful, * an {@link AuthenticationException} is thrown, the subclass of which identifies why the attempt failed. * If successful, the account data associated with the submitted principals/credentials will be * associated with this {@code Subject} and the method will return quietly. * &lt;p/&gt; * Upon returning quietly, this {@code Subject} instance can be considered * authenticated and {@link #getPrincipal() getPrincipal()} will be non-null and" />
      <item value="Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - admin, rememberMe=true]. Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException)." />
      <item value="Returns the context path of the web application. * * &lt;p&gt;The context path is the portion of the request URI that is used * to select the context of the request. The context path always comes * first in a request URI. The path starts with a &quot;/&quot; character but does * not end with a &quot;/&quot; character. For servlets in the default (root) * context, this method returns &quot;&quot;. * * &lt;p&gt;It is possible that a servlet container may match a context by * more than one context path. In such cases the * {@link javax.servlet.http.HttpServletRequest#getContextPath()} * will return the actual context path used by the request and it may * differ from the path returned by this method. * The context path returned by this method should be considered as the * prime or preferred context path of the application. * * @return The context path of the web application, or &quot;&quot; for the * default (root) context" />
      <item value="/** * Returns a &lt;code&gt;String&lt;/code&gt; containing the real path * for a given virtual path. For example, the path &quot;/index.html&quot; * returns the absolute file path on the server's filesystem would be * served by a request for &quot;http://host/contextPath/index.html&quot;, * where contextPath is the context path of this ServletContext.. * * &lt;p&gt;The real path returned will be in a form * appropriate to the computer and operating system on * which the servlet container is running, including the * proper path separators. This method returns &lt;code&gt;null&lt;/code&gt; * if the servlet container cannot translate the virtual path * to a real path for any reason (such as when the content is * being made available from a &lt;code&gt;.war&lt;/code&gt; archive). * * * @param path a &lt;code&gt;String&lt;/code&gt; specifying a virtual path * * * @return a &lt;code&gt;String&lt;/code&gt; specifying the real path, * or null if the translation cannot be performed * * */" />
      <item value="@deprecated As of Version 2.2, this method is * replaced by {@link #setAttribute} * * @param name the name to which the object is bound; * cannot be null * * @param value the object to be bound; cannot be null" />
      <item value="/* * Copyright 2001-2004 The Apache Software Foundation. * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */" />
      <item value="Get the next value. The value can be a Boolean, Double, Integer, * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object." />
      <item value="Opens a communications link to the resource referenced by this * URL, if such a connection has not already been established. * &lt;p&gt; * If the {@code connect} method is called when the connection * has already been opened (indicated by the {@code connected} * field having the value {@code true}), the call is ignored. * &lt;p&gt; * URLConnection objects go through two phases: first they are * created, then they are connected. After being created, and * before being connected, various options can be specified * (e.g., doInput and UseCaches). After connecting, it is an * error to try to set them. Operations that depend on being * connected, like getContentLength, will implicitly perform the * connection, if necessary." />
      <item value="an input stream that reads from this open connection." />
      <item value="* The abstract class {@code URLConnection} is the superclass * of all classes that represent a communications link between the * application and a URL. Instances of this class can be used both to * read from and to write to the resource referenced by the URL. In * general, creating a connection to a URL is a multistep process:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="100" />
        <entry key="ENGLISH" value="101" />
        <entry key="CATALAN" value="2" />
      </map>
    </option>
  </component>
</application>