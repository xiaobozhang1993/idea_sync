<application>
  <component name="AppStorage">
    <histories>
      <item value="Returns a string whose value is this string, with any leading and trailing * whitespace removed." />
      <item value="If the specified key is not already associated with a value, * attempts to compute its value using the given mapping function * and enters it into this map unless {@code null}. The entire * method invocation is performed atomically, so the function is * applied at most once per key. Some attempted update operations * on this map by other threads may be blocked while computation * is in progress, so the computation should be short and simple, * and must not attempt to update any other mappings of this map." />
      <item value="This class is usually preferable to {@link AtomicLong} when * multiple threads update a common sum that is used for purposes such * as collecting statistics, not for fine-grained synchronization * control. Under low update contention, the two classes have similar * characteristics. But under high contention, expected throughput of * this class is significantly higher, at the expense of higher space * consumption." />
      <item value="maintain" />
      <item value="Atomically increments by one the current value." />
      <item value="A {@code long} value that may be updated atomically. See the * {@link java.util.concurrent.atomic} package specification for * description of the properties of atomic variables. An * {@code AtomicLong} is used in applications such as atomically * incremented sequence numbers, and cannot be used as a replacement * for a {@link java.lang.Long}. However, this class does extend * {@code Number} to allow uniform access by tools and utilities that * deal with numerically-based classes." />
      <item value="clazz" />
      <item value="produce" />
      <item value="Fetching" />
      <item value="Return a reference a RemoteEndpoint object representing the peer of this conversation" />
      <item value="efines callback methods to configure the WebSocket request handling" />
      <item value="The name of the argument in the advice signature to bind the returned value to" />
      <item value="Aspect" />
      <item value="Whether the HTTP session is allowed to be created." />
      <item value="The name of the attribute under which the HTTP session id is exposed" />
      <item value="Configure interceptors for the handshake request." />
      <item value="Configure a WebSocketHandler at the specified URL paths." />
      <item value="Defines callback methods to configure the WebSocket request handling" />
      <item value="A handler for WebSocket messages and lifecycle events" />
      <item value="All other methods have empty implementations." />
      <item value="Binary messages are rejected with" />
      <item value="Returns the value of the given calendar field. In lenient mode, * all calendar fields are normalized. In non-lenient mode, all * calendar fields are validated and this method throws an * exception if any calendar fields have out-of-range values. The * normalization and validation are handled by the" />
      <item value="iterable" />
      <item value="Invalid" />
      <item value="Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the * day of the month. This is a synonym for &lt;code&gt;DATE&lt;/code&gt;. * The first day of the month has value 1." />
      <item value="Returns the lowest maximum value for the given calendar field * of this &lt;code&gt;Calendar&lt;/code&gt; instance. The lowest maximum * value is defined as the smallest value returned by {@link * #getActualMaximum(int)} for any possible time value. The least * maximum value depends on calendar system specific parameters of * the instance. For example, a &lt;code&gt;Calendar&lt;/code&gt; for the * Gregorian calendar system returns 28 for the * &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; field, because the 28th is the last * day of the shortest month of this calendar, February in a * common year." />
      <item value="* Parses text from the beginning of the given string to produce a date. * The method may not use the entire text of the given string. * &lt;p&gt; * See the {@link #parse(String, ParsePosition)} method for more information * on date parsing. * * @param source A &lt;code&gt;String&lt;/code&gt; whose beginning should be parsed. * @return A &lt;code&gt;Date&lt;/code&gt; parsed from the string. * @exception ParseException if the beginning of the specified string * cannot be parsed." />
      <item value="Returns the simple name of the underlying class as given in the * source code. Returns an empty string if the underlying class is * anonymous." />
      <item value="qualifying" />
      <item value="enum" />
      <item value="Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not * use this file except in compliance with the License. You may obtain a copy of * the License at * &lt;p&gt; * http://www.apache.org/licenses/LICENSE-2.0 * &lt;p&gt; * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations under * the License." />
      <item value="Marks the annotated method or type as permitting cross origin requests. * * &lt;p&gt;By default all origins and headers are permitted, credentials are allowed, * and the maximum age is set to 1800 seconds (30 minutes). The list of HTTP * methods is set to the methods on the {@code @RequestMapping} if not * explicitly set on {@code @CrossOrigin}. * * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {@code @CrossOrigin} is processed if an appropriate * {@code HandlerMapping}-{@code HandlerAdapter} pair is configured such as the * {@code RequestMappingHandlerMapping}-{@code RequestMappingHandlerAdapter} * pair which are the default in the MVC Java config and the MVC namespace. * In particular {@code @CrossOrigin} is not supported with the * {@code DefaultAnnotationHandlerMapping}-{@code AnnotationMethodHandlerAdapter} * pair both of which are also deprecated." />
      <item value="Illegal Argument Exception" />
      <item value="persistence" />
      <item value="Invokes the underlying method represented by this {@code Method} * object, on the specified object with the specified parameters. * Individual parameters are automatically unwrapped to match * primitive formal parameters, and both primitive and reference * parameters are subject to method invocation conversions as * necessary." />
      <item value="When compiling without debug info, or when interpreting pointcuts at runtime, * the names of any arguments used in the advice declaration are not available. * Under these circumstances only, it is necessary to provide the arg names in * the annotation - these MUST duplicate the names used in the annotated method. * Format is a simple comma-separated list." />
      <item value="The pointcut expression where to bind the advice" />
      <item value="Illegal" />
      <item value="Performs the authentication attempt by interacting with the single configured realm, which is significantly" />
      <item value="Attempts to authenticate the given token by iterating over the internal collection of" />
      <item value="Realize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones." />
      <item value="ealize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones" />
      <item value="in order to accurately handle these problems and to notify the user in an * appropriate manner why the authentication attempt failed" />
      <item value="See the specific exceptions listed below to as examples of what could happen" />
      <item value="if there is any problem during the authentication process." />
      <item value="Pluggable" />
      <item value="An Authenticator is responsible for authenticating accounts in an application. It * is one of the primary entry points into the Shiro API." />
      <item value="primary" />
      <item value="Authenticates a user based on the submitted" />
      <item value="* Authenticates a user based on the submitted {@code AuthenticationToken}." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="112" />
        <entry key="ENGLISH" value="113" />
        <entry key="CATALAN" value="2" />
      </map>
    </option>
  </component>
</application>