<application>
  <component name="AppStorage">
    <histories>
      <item value="/** * Validates all constraints on {@code object}. * * @param object object to validate * @param groups the group or list of groups targeted for validation (defaults to * {@link Default}) * @param &lt;T&gt; the type of the object to validate * @return constraint violations or an empty set if none * @throws IllegalArgumentException if object is {@code null} * or if {@code null} is passed to the varargs groups * @throws ValidationException if a non recoverable error happens * during the validation process" />
      <item value="Validates bean instances. Implementations of this interface must be thread-safe." />
      <item value="自动" />
      <item value="The enumeration value indicating horizontal alignment of a cell, * i.e., whether it is aligned general, left, right, horizontally centered, filled (replicated), * justified, centered across multiple cells, or distributed." />
      <item value="com.alibaba.excel.exception.ExcelCommonException: The index of 'parentName' and 'name' must be inconsistent" />
      <item value="inconsistent" />
      <item value="列" />
      <item value="Subclasses must implement this method to perform the actual configuration load. * The method is invoked by {@link #refresh()} before any other initialization work. * &lt;p&gt;A subclass will either create a new bean factory and hold a reference to it, * or return a single BeanFactory instance that it holds. In the latter case, it will * usually throw an IllegalStateException if refreshing the context more than once. * @throws BeansException if initialization of the bean factory failed * @throws IllegalStateException if already initialized and multiple refresh" />
      <item value="api Ticket Url" />
      <item value="Chain Definition" />
      <item value="resolve Argument" />
      <item value="Requires the current executor's Subject to imply a particular permission in * order to execute the annotated method. If the executor's associated" />
      <item value="three" />
      <item value="大写" />
      <item value="拖拽排序" />
      <item value="chapter Bane 1" />
      <item value="Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="文档" />
      <item value="技术杂记" />
      <item value="consisting" />
      <item value="INFO" />
      <item value="implementation" />
      <item value="bound" />
      <item value="Return the RequestAttributes currently bound to the thread. * @return the RequestAttributes currently bound to the thread, * or {@code null} if none bound" />
      <item value="Compares this {@code String} to another {@code String}, ignoring case * considerations. Two strings are considered equal ignoring case if they * are of the same length and corresponding characters in the two strings * are equal ignoring case. * * &lt;p&gt; Two characters {@code c1} and {@code c2} are considered the same * ignoring case if at least one of the following is true: * &lt;ul&gt; * &lt;li&gt; The two characters are the same (as compared by the * {@code ==} operator) * &lt;li&gt; Applying the method {@link * java.lang.Character#toUpperCase(char)} to each character * produces the same result * &lt;li&gt; Applying the method {@link * java.lang.Character#toLowerCase(char)} to each character * produces the same result" />
      <item value="ignoring" />
      <item value="Compares" />
      <item value="/** * Compares this {@code String} to another {@code String}, ignoring case * considerations. Two strings are considered equal ignoring case if they * are of the same length and corresponding characters in the two strings * are equal ignoring case. * * &lt;p&gt; Two characters {@code c1} and {@code c2} are considered the same * ignoring case if at least one of the following is true: * &lt;ul&gt; * &lt;li&gt; The two characters are the same (as compared by the * {@code ==} operator) * &lt;li&gt; Applying the method {@link * java.lang.Character#toUpperCase(char)} to each character * produces the same result * &lt;li&gt; Applying the method {@link * java.lang.Character#toLowerCase(char)} to each character * produces the same result * &lt;/ul&gt; * * @param anotherString * The {@code String} to compare this {@code String} against * * @return {@code true} if the argument is not {@code null} and it * represents an equivalent {@code String} ignoring case; {@code * false} otherwise * * @see #equals(Object)" />
      <item value="Consider defining a bean of type 'com.alt.credit.security.CurrentCompanyMethodArgumentResolver' in your configuration." />
      <item value="Consider" />
      <item value="The name of the service with optional protocol prefix. Synonym for {@link #name() * name}. A name must be specified for all clients, whether or not a url is provided. * Can be specified as property key, eg: ${propertyKey}." />
      <item value="Represents an operation that accepts a single input argument and returns no * result. Unlike most other functional interfaces, {@code Consumer} is expected * to operate via side-effects." />
      <item value="Serializability of a class is enabled by the class implementing the * java.io.Serializable interface. Classes that do not implement this * interface will not have any of their state serialized or * deserialized. All subtypes of a serializable class are themselves * serializable. The serialization interface has no methods or fields * and serves only to identify the semantics of being serializable." />
      <item value="Creates a matcher that will match the given input against this pattern." />
      <item value="Replaces each substring of this string that matches the literal target * sequence with the specified literal replacement sequence. The * replacement proceeds from the beginning of the string to the end, for * example, replacing &quot;aa&quot; with &quot;b&quot; in the string &quot;aaa&quot; will result in * &quot;ba&quot; rather than &quot;ab&quot;." />
      <item value="ost" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="30" />
        <entry key="ENGLISH" value="31" />
      </map>
    </option>
  </component>
</application>