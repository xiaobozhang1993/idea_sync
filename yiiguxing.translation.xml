<application>
  <component name="AppStorage">
    <histories>
      <item value="Illegal Argument Exception" />
      <item value="persistence" />
      <item value="Invokes the underlying method represented by this {@code Method} * object, on the specified object with the specified parameters. * Individual parameters are automatically unwrapped to match * primitive formal parameters, and both primitive and reference * parameters are subject to method invocation conversions as * necessary." />
      <item value="When compiling without debug info, or when interpreting pointcuts at runtime, * the names of any arguments used in the advice declaration are not available. * Under these circumstances only, it is necessary to provide the arg names in * the annotation - these MUST duplicate the names used in the annotated method. * Format is a simple comma-separated list." />
      <item value="The pointcut expression where to bind the advice" />
      <item value="Illegal" />
      <item value="Performs the authentication attempt by interacting with the single configured realm, which is significantly" />
      <item value="Attempts to authenticate the given token by iterating over the internal collection of" />
      <item value="Realize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones." />
      <item value="ealize an * implementation of this interface may or may not throw those listed or may * throw other AuthenticationExceptions, but the list shows the most common ones" />
      <item value="in order to accurately handle these problems and to notify the user in an * appropriate manner why the authentication attempt failed" />
      <item value="See the specific exceptions listed below to as examples of what could happen" />
      <item value="if there is any problem during the authentication process." />
      <item value="Pluggable" />
      <item value="An Authenticator is responsible for authenticating accounts in an application. It * is one of the primary entry points into the Shiro API." />
      <item value="primary" />
      <item value="Authenticates a user based on the submitted" />
      <item value="* Authenticates a user based on the submitted {@code AuthenticationToken}." />
      <item value="Delegates to the wrapped" />
      <item value="Returns the currently accessible {@code Subject} available to the calling code depending on * runtime environment. * &lt;p/&gt; * This method is provided as a way of obtaining a {@code Subject} without having to resort to * implementation-specific methods. It also allows the Shiro team to change the underlying implementation of * this method in the future depending on requirements/updates without affecting your code that uses it." />
      <item value="Accesses the currently accessible {@code Subject} for the calling code depending on runtime environment." />
      <item value="Performs a login attempt for this Subject/user. If unsuccessful, * an {@link AuthenticationException} is thrown, the subclass of which identifies why the attempt failed. * If successful, the account data associated with the submitted principals/credentials will be * associated with this {@code Subject} and the method will return quietly. * &lt;p/&gt; * Upon returning quietly, this {@code Subject} instance can be considered * authenticated and {@link #getPrincipal() getPrincipal()} will be non-null and" />
      <item value="Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - admin, rememberMe=true]. Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException)." />
      <item value="Returns the context path of the web application. * * &lt;p&gt;The context path is the portion of the request URI that is used * to select the context of the request. The context path always comes * first in a request URI. The path starts with a &quot;/&quot; character but does * not end with a &quot;/&quot; character. For servlets in the default (root) * context, this method returns &quot;&quot;. * * &lt;p&gt;It is possible that a servlet container may match a context by * more than one context path. In such cases the * {@link javax.servlet.http.HttpServletRequest#getContextPath()} * will return the actual context path used by the request and it may * differ from the path returned by this method. * The context path returned by this method should be considered as the * prime or preferred context path of the application. * * @return The context path of the web application, or &quot;&quot; for the * default (root) context" />
      <item value="/** * Returns a &lt;code&gt;String&lt;/code&gt; containing the real path * for a given virtual path. For example, the path &quot;/index.html&quot; * returns the absolute file path on the server's filesystem would be * served by a request for &quot;http://host/contextPath/index.html&quot;, * where contextPath is the context path of this ServletContext.. * * &lt;p&gt;The real path returned will be in a form * appropriate to the computer and operating system on * which the servlet container is running, including the * proper path separators. This method returns &lt;code&gt;null&lt;/code&gt; * if the servlet container cannot translate the virtual path * to a real path for any reason (such as when the content is * being made available from a &lt;code&gt;.war&lt;/code&gt; archive). * * * @param path a &lt;code&gt;String&lt;/code&gt; specifying a virtual path * * * @return a &lt;code&gt;String&lt;/code&gt; specifying the real path, * or null if the translation cannot be performed * * */" />
      <item value="@deprecated As of Version 2.2, this method is * replaced by {@link #setAttribute} * * @param name the name to which the object is bound; * cannot be null * * @param value the object to be bound; cannot be null" />
      <item value="/* * Copyright 2001-2004 The Apache Software Foundation. * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */" />
      <item value="Get the next value. The value can be a Boolean, Double, Integer, * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object." />
      <item value="Opens a communications link to the resource referenced by this * URL, if such a connection has not already been established. * &lt;p&gt; * If the {@code connect} method is called when the connection * has already been opened (indicated by the {@code connected} * field having the value {@code true}), the call is ignored. * &lt;p&gt; * URLConnection objects go through two phases: first they are * created, then they are connected. After being created, and * before being connected, various options can be specified * (e.g., doInput and UseCaches). After connecting, it is an * error to try to set them. Operations that depend on being * connected, like getContentLength, will implicitly perform the * connection, if necessary." />
      <item value="an input stream that reads from this open connection." />
      <item value="* The abstract class {@code URLConnection} is the superclass * of all classes that represent a communications link between the * application and a URL. Instances of this class can be used both to * read from and to write to the resource referenced by the URL. In * general, creating a connection to a URL is a multistep process:" />
      <item value="Returns an input stream that reads from this open connection. * * A SocketTimeoutException can be thrown when reading from the * returned input stream if the read timeout expires before data * is available for read." />
      <item value="Annotation Aware Aspect J Auto Proxy Creator" />
      <item value="Returns a {@code String} object representing this * {@code Long}'s value. The value is converted to signed * decimal representation and returned as a string, exactly as if * the {@code long} value were given as an argument to the * {@link java.lang.Long#toString(long)} method." />
      <item value="Returns the current time in milliseconds. Note that * while the unit of time of the return value is a millisecond, * the granularity of the value depends on the underlying * operating system and may be larger. For example, many * operating systems measure time in units of tens of * milliseconds. * * &lt;p&gt; See the description of the class &lt;code&gt;Date&lt;/code&gt; for * a discussion of slight discrepancies that may arise between * &quot;computer time&quot; and coordinated universal time (UTC). * * @return the difference, measured in milliseconds, between * the current time and midnight, January 1, 1970 UTC." />
      <item value="Scans the classpath for annotated components that will be auto-registered as Spring beans. By default, the Spring-provided @Component, @Repository, @Service, and @Controller stereotypes will be detected. Note: This tag implies the effects of the 'annotation-config' tag, activating @Required, @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit annotations in the component classes, which is usually desired for autodetected components (without external configuration). Turn off the 'annotation-config' attribute to deactivate this default behavior, for example in order to use custom BeanPostProcessor definitions for handling those annotations. Note: You may use placeholders in package paths, but only resolved against system properties (analogous to resource paths). A component scan results in new bean definition being registered; Spring's PropertyPlaceholderConfigurer will apply to those bean definitions just like to regular bean definitions, but it won't apply to the component scan settings themselves." />
      <item value="Monitoring" />
      <item value="Returns an array of the kinds of elements an annotation type * can be applied to. * @return an array of the kinds of elements an annotation type * can be applied to" />
      <item value="* Indicates that an annotation type is automatically inherited. If * an Inherited meta-annotation is present on an annotation type * declaration, and the user queries the annotation type on a class * declaration, and the class declaration has no annotation for this type, * then the class's superclass will automatically be queried for the * annotation type. This process will be repeated until an annotation for this * type is found, or the top of the class hierarchy (Object) * is reached. If no superclass has an annotation for this type, then * the query will indicate that the class in question has no such annotation. * * &lt;p&gt;Note that this meta-annotation type has no effect if the annotated * type is used to annotate anything other than a class. Note also * that this meta-annotation only causes annotations to be inherited * from superclasses; annotations on implemented interfaces have no" />
      <item value="/** * Indicates that annotations with a type are to be documented by javadoc * and similar tools by default. This type should be used to annotate the * declarations of types whose annotations affect the use of annotated * elements by their clients. If a type declaration is annotated with * Documented, its annotations become part of the public API * of the annotated elements. * * @author Joshua Bloch * @since 1.5 */" />
      <item value="check the manual that corresponds to your MySQL server version for the right syntax to use near ''hospitalId" />
      <item value="Indicates whether some other object is &amp;quot;equal to&amp;quot; this * comparator. This method must obey the general contract of * {@link Object#equals(Object)}. Additionally, this method can return * &lt;tt&gt;true&lt;/tt&gt; &lt;i&gt;only&lt;/i&gt; if the specified object is also a comparator * and it imposes the same ordering as this comparator. Thus, * &lt;code&gt;comp1.equals(comp2)&lt;/code&gt; implies that &lt;tt&gt;sgn(comp1.compare(o1, * o2))==sgn(comp2.compare(o1, o2))&lt;/tt&gt; for every object reference * &lt;tt&gt;o1&lt;/tt&gt; and &lt;tt&gt;o2&lt;/tt&gt;.&lt;p&gt;" />
      <item value="Compares its two arguments for order. Returns a negative integer, * zero, or a positive integer as the first argument is less than, equal * to, or greater than the second.&lt;p&gt; * * In the foregoing description, the notation * &lt;tt&gt;sgn(&lt;/tt&gt;&lt;i&gt;expression&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; designates the mathematical * &lt;i&gt;signum&lt;/i&gt; function, which is defined to return one of &lt;tt&gt;-1&lt;/tt&gt;, * &lt;tt&gt;0&lt;/tt&gt;, or &lt;tt&gt;1&lt;/tt&gt; according to whether the value of * &lt;i&gt;expression&lt;/i&gt; is negative, zero or positive.&lt;p&gt; * * The implementor must ensure that &lt;tt&gt;sgn(compare(x, y)) == * -sgn(compare(y, x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;. (This * implies that &lt;tt&gt;compare(x, y)&lt;/tt&gt; must throw an exception if and only * if &lt;tt&gt;compare(y, x)&lt;/tt&gt; throws an exception.)&lt;p&gt; * * The implementor must also ensure that the relation is transitive: * &lt;tt&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/tt&gt; implies * &lt;tt&gt;compare(x, z)&amp;gt;0&lt;/tt&gt;.&lt;p&gt; * * Finally, the implementor must ensure that &lt;tt&gt;compare(x, y)==0&lt;/tt&gt; * implies that &lt;tt&gt;sgn(compare(x, z))==sgn(compare(y, z))&lt;/tt&gt; for all * &lt;tt&gt;z&lt;/tt&gt;.&lt;p&gt; * * It is generally the case, but &lt;i&gt;not&lt;/i&gt; strictly required that * &lt;tt&gt;(compare(x, y)==0) == (x.equals(y))&lt;/tt&gt;. Generally speaking, * any comparator that violates this condition should clearly indicate * this fact. The recommended language is &quot;Note: this comparator * imposes orderings that are inconsistent with equals.&quot; * * @param o1 the first object to be compared. * @param o2 the second object to be compared. * @return a negative integer, zero, or a positive integer as the * first argument is less than, equal to, or greater than the * second. * @throws NullPointerException if an argument is null and this * comparator does not permit null arguments * @throws ClassCastException if the arguments' types prevent them from * being compared by this comparator. */" />
      <item value="Compares its two arguments for order. Returns a negative integer, * zero, or a positive integer as the first argument is less than, equal * to, or greater than the second.&lt;p&gt; * * In the foregoing description, the notation * &lt;tt&gt;sgn(&lt;/tt&gt;&lt;i&gt;expression&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; designates the mathematical * &lt;i&gt;signum&lt;/i&gt; function, which is defined to return one of &lt;tt&gt;-1&lt;/tt&gt;, * &lt;tt&gt;0&lt;/tt&gt;, or &lt;tt&gt;1&lt;/tt&gt; according to whether the value of * &lt;i&gt;expression&lt;/i&gt; is negative, zero or positive.&lt;p&gt; * * The implementor must ensure that &lt;tt&gt;sgn(compare(x, y)) == * -sgn(compare(y, x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;. (This * implies that &lt;tt&gt;compare(x, y)&lt;/tt&gt; must throw an exception if and only * if &lt;tt&gt;compare(y, x)&lt;/tt&gt; throws an exception.)&lt;p&gt; * * The implementor must also ensure that the relation is transitive: * &lt;tt&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/tt&gt; implies * &lt;tt&gt;compare(x, z)&amp;gt;0&lt;/tt&gt;.&lt;p&gt; * * Finally, the implementor must ensure that &lt;tt&gt;compare(x, y)==0&lt;/tt&gt; * implies that &lt;tt&gt;sgn(compare(x, z))==sgn(compare(y, z))&lt;/tt&gt; for all * &lt;tt&gt;z&lt;/tt&gt;.&lt;p&gt; * * It is generally the case, but &lt;i&gt;not&lt;/i&gt; strictly required that * &lt;tt&gt;(compare(x, y)==0) == (x.equals(y))&lt;/tt&gt;. Generally speaking, * any comparator that violates this condition should clearly indicate * this fact. The recommended language is &quot;Note: this comparator * imposes orderings that are inconsistent with equals.&quot; * * @param o1 the first object to be compared. * @param o2 the second object to be compared. * @return a negative integer, zero, or a positive integer as the * first argument is less than, equal to, or greater than the * second. * @throws NullPointerException if an argument is null and this * comparator does not permit null arguments * @throws ClassCastException if the arguments' types prevent them from * being compared by this comparator." />
      <item value="/** * A comparison function, which imposes a &lt;i&gt;total ordering&lt;/i&gt; on some * collection of objects. Comparators can be passed to a sort method (such * as {@link Collections#sort(List,Comparator) Collections.sort} or {@link * Arrays#sort(Object[],Comparator) Arrays.sort}) to allow precise control * over the sort order. Comparators can also be used to control the order of * certain data structures (such as {@link SortedSet sorted sets} or {@link * SortedMap sorted maps}), or to provide an ordering for collections of * objects that don't have a {@link Comparable natural ordering}.&lt;p&gt; * * The ordering imposed by a comparator &lt;tt&gt;c&lt;/tt&gt; on a set of elements * &lt;tt&gt;S&lt;/tt&gt; is said to be &lt;i&gt;consistent with equals&lt;/i&gt; if and only if * &lt;tt&gt;c.compare(e1, e2)==0&lt;/tt&gt; has the same boolean value as * &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; for every &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in * &lt;tt&gt;S&lt;/tt&gt;.&lt;p&gt; * * Caution should be exercised when using a comparator capable of imposing an * ordering inconsistent with equals to order a sorted set (or sorted map). * Suppose a sorted set (or sorted map) with an explicit comparator &lt;tt&gt;c&lt;/tt&gt; * is used with elements (or keys) drawn from a set &lt;tt&gt;S&lt;/tt&gt;. If the * ordering imposed by &lt;tt&gt;c&lt;/tt&gt; on &lt;tt&gt;S&lt;/tt&gt; is inconsistent with equals, * the sorted set (or sorted map) will behave &quot;strangely.&quot; In particular the * sorted set (or sorted map) will violate the general contract for set (or * map), which is defined in terms of &lt;tt&gt;equals&lt;/tt&gt;.&lt;p&gt; * * For example, suppose one adds two elements {@code a} and {@code b} such that * {@code (a.equals(b) &amp;&amp; c.compare(a, b) != 0)} * to an empty {@code TreeSet} with comparator {@code c}. * The second {@code add} operation will return * true (and the size of the tree set will increase) because {@code a} and * {@code b} are not equivalent from the tree set's perspective, even though * this is contrary to the specification of the * {@link Set#add Set.add} method.&lt;p&gt; * * Note: It is generally a good idea for comparators to also implement * &lt;tt&gt;java.io.Serializable&lt;/tt&gt;, as they may be used as ordering methods in * serializable data structures (like {@link TreeSet}, {@link TreeMap}). In * order for the data structure to serialize successfully, the comparator (if * provided) must implement &lt;tt&gt;Serializable&lt;/tt&gt;.&lt;p&gt; * * For the mathematically inclined, the &lt;i&gt;relation&lt;/i&gt; that defines the * &lt;i&gt;imposed ordering&lt;/i&gt; that a given comparator &lt;tt&gt;c&lt;/tt&gt; imposes on a * given set of objects &lt;tt&gt;S&lt;/tt&gt; is:&lt;pre&gt; * {(x, y) such that c.compare(x, y) &amp;lt;= 0}. * &lt;/pre&gt; The &lt;i&gt;quotient&lt;/i&gt; for this total order is:&lt;pre&gt; * {(x, y) such that c.compare(x, y) == 0}. * &lt;/pre&gt; * * It follows immediately from the contract for &lt;tt&gt;compare&lt;/tt&gt; that the * quotient is an &lt;i&gt;equivalence relation&lt;/i&gt; on &lt;tt&gt;S&lt;/tt&gt;, and that the * imposed ordering is a &lt;i&gt;total order&lt;/i&gt; on &lt;tt&gt;S&lt;/tt&gt;. When we say that * the ordering imposed by &lt;tt&gt;c&lt;/tt&gt; on &lt;tt&gt;S&lt;/tt&gt; is &lt;i&gt;consistent with * equals&lt;/i&gt;, we mean that the quotient for the ordering is the equivalence * relation defined by the objects' {@link Object#equals(Object) * equals(Object)} method(s):&lt;pre&gt; * {(x, y) such that x.equals(y)}. &lt;/pre&gt; * * &lt;p&gt;Unlike {@code Comparable}, a comparator may optionally permit * comparison of null arguments, while maintaining the requirements for * an equivalence relation. * * &lt;p&gt;This interface is a member of the * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; * Java Collections Framework&lt;/a&gt;. * * @param &lt;T&gt; the type of objects that may be compared by this comparator" />
      <item value="Reader to use for reading JSON content to parse" />
      <item value="Method for constructing parser for parsing" />
      <item value="/** * Hash table based implementation of the &lt;tt&gt;Map&lt;/tt&gt; interface. This * implementation provides all of the optional map operations, and permits * &lt;tt&gt;null&lt;/tt&gt; values and the &lt;tt&gt;null&lt;/tt&gt; key. (The &lt;tt&gt;HashMap&lt;/tt&gt; * class is roughly equivalent to &lt;tt&gt;Hashtable&lt;/tt&gt;, except that it is * unsynchronized and permits nulls.) This class makes no guarantees as to * the order of the map; in particular, it does not guarantee that the order * will remain constant over time. * * &lt;p&gt;This implementation provides constant-time performance for the basic * operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the hash function * disperses the elements properly among the buckets. Iteration over * collection views requires time proportional to the &quot;capacity&quot; of the * &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of buckets) plus its size (the number * of key-value mappings). Thus, it's very important not to set the initial * capacity too high (or the load factor too low) if iteration performance is * important. * * &lt;p&gt;An instance of &lt;tt&gt;HashMap&lt;/tt&gt; has two parameters that affect its * performance: &lt;i&gt;initial capacity&lt;/i&gt; and &lt;i&gt;load factor&lt;/i&gt;. The * &lt;i&gt;capacity&lt;/i&gt; is the number of buckets in the hash table, and the initial * capacity is simply the capacity at the time the hash table is created. The * &lt;i&gt;load factor&lt;/i&gt; is a measure of how full the hash table is allowed to * get before its capacity is automatically increased. When the number of * entries in the hash table exceeds the product of the load factor and the * current capacity, the hash table is &lt;i&gt;rehashed&lt;/i&gt; (that is, internal data * structures are rebuilt) so that the hash table has approximately twice the * number of buckets. * * &lt;p&gt;As a general rule, the default load factor (.75) offers a good * tradeoff between time and space costs. Higher values decrease the * space overhead but increase the lookup cost (reflected in most of * the operations of the &lt;tt&gt;HashMap&lt;/tt&gt; class, including * &lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;). The expected number of entries in * the map and its load factor should be taken into account when * setting its initial capacity, so as to minimize the number of * rehash operations. If the initial capacity is greater than the * maximum number of entries divided by the load factor, no rehash * operations will ever occur. * * &lt;p&gt;If many mappings are to be stored in a &lt;tt&gt;HashMap&lt;/tt&gt; * instance, creating it with a sufficiently large capacity will allow * the mappings to be stored more efficiently than letting it perform * automatic rehashing as needed to grow the table. Note that using * many keys with the same {@code hashCode()} is a sure way to slow * down performance of any hash table. To ameliorate impact, when keys * are {@link Comparable}, this class may use comparison order among * keys to help break ties. * * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; * If multiple threads access a hash map concurrently, and at least one of * the threads modifies the map structurally, it &lt;i&gt;must&lt;/i&gt; be * synchronized externally. (A structural modification is any operation * that adds or deletes one or more mappings; merely changing the value * associated with a key that an instance already contains is not a * structural modification.) This is typically accomplished by * synchronizing on some object that naturally encapsulates the map. * * If no such object exists, the map should be &quot;wrapped&quot; using the * {@link Collections#synchronizedMap Collections.synchronizedMap} * method. This is best done at creation time, to prevent accidental * unsynchronized access to the map:&lt;pre&gt; * Map m = Collections.synchronizedMap(new HashMap(...));&lt;/pre&gt; * * &lt;p&gt;The iterators returned by all of this class's &quot;collection view methods&quot; * are &lt;i&gt;fail-fast&lt;/i&gt;: if the map is structurally modified at any time after * the iterator is created, in any way except through the iterator's own * &lt;tt&gt;remove&lt;/tt&gt; method, the iterator will throw a * {@link ConcurrentModificationException}. Thus, in the face of concurrent * modification, the iterator fails quickly and cleanly, rather than risking * arbitrary, non-deterministic behavior at an undetermined time in the * future. * * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed * as it is, generally speaking, impossible to make any hard guarantees in the * presence of unsynchronized concurrent modification. Fail-fast iterators * throw &lt;tt&gt;ConcurrentModificationException&lt;/tt&gt; on a best-effort basis. * Therefore, it would be wrong to write a program that depended on this * exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators * should be used only to detect bugs.&lt;/i&gt; * * &lt;p&gt;This class is a member of the * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; * Java Collections Framework&lt;/a&gt;. * * @param &lt;K&gt; the type of keys maintained by this map * @param &lt;V&gt; the type of mapped values" />
      <item value="/** * An ordered collection (also known as a &lt;i&gt;sequence&lt;/i&gt;). The user of this * interface has precise control over where in the list each element is * inserted. The user can access elements by their integer index (position in * the list), and search for elements in the list.&lt;p&gt; * * Unlike sets, lists typically allow duplicate elements. More formally, * lists typically allow pairs of elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; * such that &lt;tt&gt;e1.equals(e2)&lt;/tt&gt;, and they typically allow multiple * null elements if they allow null elements at all. It is not inconceivable * that someone might wish to implement a list that prohibits duplicates, by * throwing runtime exceptions when the user attempts to insert them, but we * expect this usage to be rare.&lt;p&gt; * * The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those * specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the * &lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and * &lt;tt&gt;hashCode&lt;/tt&gt; methods. Declarations for other inherited methods are * also included here for convenience.&lt;p&gt; * * The &lt;tt&gt;List&lt;/tt&gt; interface provides four methods for positional (indexed) * access to list elements. Lists (like Java arrays) are zero based. Note * that these operations may execute in time proportional to the index value * for some implementations (the &lt;tt&gt;LinkedList&lt;/tt&gt; class, for * example). Thus, iterating over the elements in a list is typically * preferable to indexing through it if the caller does not know the * implementation.&lt;p&gt; * * The &lt;tt&gt;List&lt;/tt&gt; interface provides a special iterator, called a * &lt;tt&gt;ListIterator&lt;/tt&gt;, that allows element insertion and replacement, and * bidirectional access in addition to the normal operations that the * &lt;tt&gt;Iterator&lt;/tt&gt; interface provides. A method is provided to obtain a * list iterator that starts at a specified position in the list.&lt;p&gt; * * The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to search for a specified * object. From a performance standpoint, these methods should be used with * caution. In many implementations they will perform costly linear * searches.&lt;p&gt; * * The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to efficiently insert and * remove multiple elements at an arbitrary point in the list.&lt;p&gt; * * Note: While it is permissible for lists to contain themselves as elements, * extreme caution is advised: the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt; * methods are no longer well defined on such a list. * * &lt;p&gt;Some list implementations have restrictions on the elements that * they may contain. For example, some implementations prohibit null elements, * and some have restrictions on the types of their elements. Attempting to * add an ineligible element throws an unchecked exception, typically * &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;. Attempting * to query the presence of an ineligible element may throw an exception, * or it may simply return false; some implementations will exhibit the former * behavior and some will exhibit the latter. More generally, attempting an * operation on an ineligible element whose completion would not result in * the insertion of an ineligible element into the list may throw an * exception or it may succeed, at the option of the implementation. * Such exceptions are marked as &quot;optional&quot; in the specification for this" />
      <item value="Constructs an empty list with an initial capacity of ten" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="80" />
        <entry key="ENGLISH" value="81" />
        <entry key="CATALAN" value="2" />
      </map>
    </option>
  </component>
</application>